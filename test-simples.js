const { createClient } = require("@supabase/supabase-js");
require("dotenv").config({ path: ".env.local" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testeSimples() {
  console.log("üîç Verificando status atual do sistema...\n");

  try {
    // 1. Verificar se h√° usu√°rios existentes
    console.log("1. Verificando usu√°rios existentes...");
    const { data: usuarios, error: usuariosError } = await supabase
      .from("user_profiles")
      .select("id, email, nome_completo, nivel_usuario, aprovado")
      .limit(5);

    if (usuariosError) {
      console.error("‚ùå Erro:", usuariosError.message);
    } else {
      console.log(`‚úÖ Encontrados ${usuarios.length} usu√°rios:`);
      usuarios.forEach((u, i) => {
        console.log(
          `  ${i + 1}. ${u.nome_completo || "Sem nome"} (${u.email}) - ${
            u.nivel_usuario
          } - ${u.aprovado ? "Aprovado" : "Pendente"}`
        );
      });
    }

    // 2. Testar fun√ß√£o RPC sem criar usu√°rio
    console.log("\n2. Testando fun√ß√£o RPC...");
    const usuarioTeste = usuarios && usuarios.length > 0 ? usuarios[0] : null;

    if (usuarioTeste) {
      const { error: rpcError } = await supabase.rpc(
        "update_profile_on_signup",
        {
          user_id: usuarioTeste.id,
          profile_data: { escola: "Escola Teste RPC" },
        }
      );

      if (rpcError) {
        console.error("‚ùå Erro na fun√ß√£o RPC:", rpcError.message);
      } else {
        console.log("‚úÖ Fun√ß√£o RPC funcionando");
      }
    }

    // 3. Verificar trigger
    console.log("\n3. Verificando trigger...");
    const { data: triggers, error: triggerError } = await supabase
      .from("information_schema.triggers")
      .select("*")
      .eq("trigger_name", "on_auth_user_created");

    if (triggerError) {
      console.log(
        "‚ö†Ô∏è N√£o foi poss√≠vel verificar trigger (esperado com ANON key)"
      );
    } else {
      console.log("‚úÖ Trigger existe e est√° ativo");
    }

    // 4. Simular dados de um formul√°rio
    console.log("\n4. Dados que seriam enviados pelo formul√°rio:");
    const dadosFormulario = {
      nome_completo: "Jo√£o Silva",
      data_nascimento: "1990-01-01",
      altura: 175,
      peso: 70.5,
      escolaridade: "Ensino M√©dio",
      cor_faixa: "Branca",
      escola: "Academia Teste",
      contato: "(11) 99999-9999",
      endereco: "Rua Teste, 123",
      instagram: "@joao",
      facebook: "joao.silva",
      tiktok: "@joao_teste",
      tipo_sanguineo: "O+",
      toma_remedio: "N√£o",
      alergico_remedio: "N√£o",
      nome_responsavel: "",
      endereco_responsavel: "",
      cpf_responsavel: "",
      contato_responsavel: "",
    };

    console.log("Dados v√°lidos:", JSON.stringify(dadosFormulario, null, 2));
  } catch (error) {
    console.error("üí• Erro:", error.message);
  }
}

testeSimples()
  .then(() => {
    console.log("\n‚úÖ Verifica√ß√£o conclu√≠da!");
    console.log("\nüìã DIAGN√ìSTICO:");
    console.log("- Se h√° usu√°rios: Sistema b√°sico funcionando");
    console.log("- Se fun√ß√£o RPC funciona: Atualiza√ß√£o de perfil OK");
    console.log("- Se trigger existe: Cria√ß√£o autom√°tica OK");
    console.log("\nO problema pode estar em:");
    console.log("1. Rate limit do Supabase (muito prov√°vel)");
    console.log("2. Confirma√ß√£o de email obrigat√≥ria");
    console.log("3. Configura√ß√µes do projeto Supabase");
    process.exit(0);
  })
  .catch(console.error);
