// Script de Teste - 100 Alunos no Sistema Jud√¥ Sandokan
// Este script testa cadastro, aprova√ß√£o, libera√ß√£o e edi√ß√£o de 100 alunos

console.log("ü•ã INICIANDO TESTE MASSIVO - 100 ALUNOS");
console.log("======================================");

// Dados base para gera√ß√£o de alunos
const nomes = [
  "Jo√£o Silva",
  "Maria Santos",
  "Pedro Oliveira",
  "Ana Costa",
  "Carlos Mendes",
  "Lucia Ferreira",
  "Roberto Lima",
  "Fernanda Souza",
  "Marcos Rocha",
  "Julia Alves",
  "Ricardo Barbosa",
  "Camila Ramos",
  "Diego Cardoso",
  "Beatriz Gomes",
  "Felipe Dias",
  "Gabriela Martins",
  "Thiago Nascimento",
  "Larissa Castro",
  "Bruno Pereira",
  "Rafaela Moura",
  "Gustavo Ribeiro",
  "Mariana Correia",
  "Leonardo Campos",
  "Isabela Teixeira",
  "Rodrigo Azevedo",
  "Amanda Nunes",
  "Daniel Carvalho",
  "Leticia Pinto",
  "Vinicius Melo",
  "Natalia Freitas",
  "Gabriel Torres",
  "Carolina Vieira",
  "Mateus Duarte",
  "Bianca Machado",
  "Andre Fernandes",
  "Vanessa Lopes",
  "Lucas Monteiro",
  "Priscila Silva",
  "Fabio Costa",
  "Tatiane Rodrigues",
  "Henrique Batista",
  "Renata Araujo",
  "Caio Santana",
  "Monica Reis",
  "Eduardo Xavier",
  "Patricia Nogueira",
  "Otavio Cruz",
  "Sandra Medeiros",
  "Claudio Soares",
  "Vera Miranda",
];

const sobrenomes = [
  "Silva",
  "Santos",
  "Oliveira",
  "Souza",
  "Costa",
  "Pereira",
  "Rodrigues",
  "Almeida",
  "Nascimento",
  "Lima",
  "Araujo",
  "Ribeiro",
  "Rocha",
  "Carvalho",
  "Gomes",
  "Martins",
  "Barbosa",
  "Ferreira",
  "Moreira",
  "Dias",
  "Castro",
  "Pinto",
  "Ramos",
  "Lopes",
  "Monteiro",
  "Cardoso",
  "Machado",
  "Freitas",
  "Correia",
  "Campos",
  "Duarte",
  "Vieira",
  "Melo",
  "Teixeira",
  "Batista",
  "Santana",
  "Reis",
  "Xavier",
  "Nogueira",
  "Cruz",
  "Medeiros",
  "Soares",
  "Miranda",
  "Azevedo",
  "Nunes",
  "Torres",
  "Fernandes",
  "Moura",
];

const escolas = [
  "EMEF Jos√© de Alencar",
  "EMEF Machado de Assis",
  "Col√©gio S√£o Paulo",
  "Escola Estadual Dom Pedro",
  "Instituto Federal",
  "Col√©gio Objetivo",
  "Escola Municipal Santos Dumont",
  "Col√©gio Anglo",
  "Escola Adventista",
  "Instituto Santa Teresa",
  "Col√©gio Marista",
  "Escola S√£o Jos√©",
];

const tiposSanguineos = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"];
const escolaridades = ["Fundamental", "M√©dio", "Superior", "P√≥s-gradua√ß√£o"];
const faixas = ["branca", "cinza", "azul", "amarela", "laranja", "verde"];

// Fun√ß√£o para gerar dados aleat√≥rios
function gerarDadosAluno(index) {
  const nome = nomes[Math.floor(Math.random() * nomes.length)];
  const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];
  const nomeCompleto = `${nome} ${sobrenome} ${index
    .toString()
    .padStart(3, "0")}`;

  const dataBase = new Date();
  dataBase.setFullYear(
    dataBase.getFullYear() - Math.floor(Math.random() * 30 + 10)
  ); // 10-40 anos
  const dataNascimento = dataBase.toISOString().split("T")[0];

  return {
    nomeCompleto,
    email: `teste.aluno${index}@judosandokan.com`,
    senha: "Teste123!",
    dataNascimento,
    altura: (Math.floor(Math.random() * 40) + 150).toString(), // 150-190cm
    peso: (Math.random() * 40 + 50).toFixed(1), // 50-90kg
    escolaridade:
      escolaridades[Math.floor(Math.random() * escolaridades.length)],
    corFaixa: faixas[Math.floor(Math.random() * faixas.length)],
    escola: escolas[Math.floor(Math.random() * escolas.length)],
    contato: `(${Math.floor(Math.random() * 89) + 11}) 9${
      Math.floor(Math.random() * 9000) + 1000
    }-${Math.floor(Math.random() * 9000) + 1000}`,
    endereco: `Rua ${nome}, ${Math.floor(Math.random() * 9999) + 1}, Centro`,
    instagram: `@${nome.toLowerCase().replace(" ", "")}_judo`,
    facebook: `${nome} Judoca`,
    tiktok: `@${nome.toLowerCase().replace(" ", "")}_judo`,
    tipoSanguineo:
      tiposSanguineos[Math.floor(Math.random() * tiposSanguineos.length)],
    tomaRemedio: Math.random() > 0.7 ? "Sim - Vitamina D" : "N√£o",
    alergicoRemedio: Math.random() > 0.8 ? "Sim - Penicilina" : "N√£o",
    nomeResponsavel:
      index % 3 === 0
        ? `${nomes[Math.floor(Math.random() * nomes.length)]} ${
            sobrenomes[Math.floor(Math.random() * sobrenomes.length)]
          }`
        : "",
    enderecoResponsavel:
      index % 3 === 0
        ? `Rua Respons√°vel, ${Math.floor(Math.random() * 999) + 1}`
        : "",
    cpfResponsavel:
      index % 3 === 0
        ? `${Math.floor(Math.random() * 900) + 100}.${
            Math.floor(Math.random() * 900) + 100
          }.${Math.floor(Math.random() * 900) + 100}-${
            Math.floor(Math.random() * 90) + 10
          }`
        : "",
    contatoResponsavel:
      index % 3 === 0
        ? `(${Math.floor(Math.random() * 89) + 11}) 9${
            Math.floor(Math.random() * 9000) + 1000
          }-${Math.floor(Math.random() * 9000) + 1000}`
        : "",
    aceitaTermos: true,
  };
}

// Fun√ß√£o para cadastrar um aluno
async function cadastrarAluno(dadosAluno, index) {
  try {
    console.log(
      `üìù Cadastrando aluno ${index}/100: ${dadosAluno.nomeCompleto}`
    );

    // Simular o processo de cadastro
    const userData = {
      nome_completo: dadosAluno.nomeCompleto,
      data_nascimento: dadosAluno.dataNascimento,
      altura: parseInt(dadosAluno.altura),
      peso: parseFloat(dadosAluno.peso),
      escolaridade: dadosAluno.escolaridade,
      cor_faixa: dadosAluno.corFaixa,
      escola: dadosAluno.escola,
      contato: dadosAluno.contato,
      endereco: dadosAluno.endereco,
      instagram: dadosAluno.instagram,
      facebook: dadosAluno.facebook,
      tiktok: dadosAluno.tiktok,
      tipo_sanguineo: dadosAluno.tipoSanguineo,
      toma_remedio: dadosAluno.tomaRemedio,
      alergico_remedio: dadosAluno.alergicoRemedio,
      nome_responsavel: dadosAluno.nomeResponsavel || undefined,
      endereco_responsavel: dadosAluno.enderecoResponsavel || undefined,
      cpf_responsavel: dadosAluno.cpfResponsavel || undefined,
      contato_responsavel: dadosAluno.contatoResponsavel || undefined,
    };

    // Aqui seria feita a chamada real para o Supabase
    // const result = await signUp(dadosAluno.email, dadosAluno.senha, userData);

    // Simular sucesso (remover quando integrar com Supabase real)
    console.log(`‚úÖ Aluno ${index} cadastrado: ${dadosAluno.nomeCompleto}`);

    return {
      success: true,
      userId: `user_${index}_${Date.now()}`,
      data: userData,
    };
  } catch (error) {
    console.error(`‚ùå Erro ao cadastrar aluno ${index}:`, error);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para aprovar um aluno
async function aprovarAluno(userId, index) {
  try {
    console.log(`‚úÖ Aprovando aluno ${index}/100`);

    // Aqui seria feita a chamada real para aprovar
    // const result = await approveUser(userId);

    // Simular aprova√ß√£o
    console.log(`üëë Aluno ${index} aprovado com sucesso`);
    return { success: true };
  } catch (error) {
    console.error(`‚ùå Erro ao aprovar aluno ${index}:`, error);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para editar perfil de um aluno
async function editarPerfilAluno(userId, dadosEdicao, index) {
  try {
    console.log(`‚úèÔ∏è Editando perfil do aluno ${index}/100`);

    // Aqui seria feita a chamada real para editar
    // const result = await updateProfile(dadosEdicao);

    // Simular edi√ß√£o
    console.log(`üìù Perfil do aluno ${index} editado com sucesso`);
    return { success: true };
  } catch (error) {
    console.error(`‚ùå Erro ao editar aluno ${index}:`, error);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o principal de teste
async function executarTesteMassivo() {
  const resultados = {
    cadastros: { sucesso: 0, erro: 0, erros: [] },
    aprovacoes: { sucesso: 0, erro: 0, erros: [] },
    edicoes: { sucesso: 0, erro: 0, erros: [] },
  };

  const usuariosCadastrados = [];

  console.log("üöÄ FASE 1: CADASTRANDO 100 ALUNOS");
  console.log("=================================");

  // Fase 1: Cadastrar 100 alunos
  for (let i = 1; i <= 100; i++) {
    const dadosAluno = gerarDadosAluno(i);
    const resultado = await cadastrarAluno(dadosAluno, i);

    if (resultado.success) {
      resultados.cadastros.sucesso++;
      usuariosCadastrados.push({
        userId: resultado.userId,
        dados: resultado.data,
        index: i,
      });
    } else {
      resultados.cadastros.erro++;
      resultados.cadastros.erros.push({ index: i, error: resultado.error });
    }

    // Pequena pausa para n√£o sobrecarregar
    await new Promise((resolve) => setTimeout(resolve, 50));
  }

  console.log(`\nüìä RESULTADO FASE 1 - CADASTROS:`);
  console.log(`‚úÖ Sucessos: ${resultados.cadastros.sucesso}`);
  console.log(`‚ùå Erros: ${resultados.cadastros.erro}`);

  console.log("\nüöÄ FASE 2: APROVANDO TODOS OS ALUNOS");
  console.log("===================================");

  // Fase 2: Aprovar todos os alunos cadastrados
  for (const usuario of usuariosCadastrados) {
    const resultado = await aprovarAluno(usuario.userId, usuario.index);

    if (resultado.success) {
      resultados.aprovacoes.sucesso++;
    } else {
      resultados.aprovacoes.erro++;
      resultados.aprovacoes.erros.push({
        index: usuario.index,
        error: resultado.error,
      });
    }

    await new Promise((resolve) => setTimeout(resolve, 30));
  }

  console.log(`\nüìä RESULTADO FASE 2 - APROVA√á√ïES:`);
  console.log(`‚úÖ Sucessos: ${resultados.aprovacoes.sucesso}`);
  console.log(`‚ùå Erros: ${resultados.aprovacoes.erro}`);

  console.log("\nüöÄ FASE 3: EDITANDO PERFIS DOS ALUNOS");
  console.log("====================================");

  // Fase 3: Editar perfis (simular mudan√ßas)
  for (const usuario of usuariosCadastrados) {
    const dadosEdicao = {
      altura:
        parseInt(usuario.dados.altura) + Math.floor(Math.random() * 10 - 5), // +/- 5cm
      peso: parseFloat(usuario.dados.peso) + (Math.random() * 10 - 5), // +/- 5kg
      contato: `(${Math.floor(Math.random() * 89) + 11}) 9${
        Math.floor(Math.random() * 9000) + 1000
      }-${Math.floor(Math.random() * 9000) + 1000}`,
      endereco: `${usuario.dados.endereco} - Apt ${
        Math.floor(Math.random() * 999) + 1
      }`,
    };

    const resultado = await editarPerfilAluno(
      usuario.userId,
      dadosEdicao,
      usuario.index
    );

    if (resultado.success) {
      resultados.edicoes.sucesso++;
    } else {
      resultados.edicoes.erro++;
      resultados.edicoes.erros.push({
        index: usuario.index,
        error: resultado.error,
      });
    }

    await new Promise((resolve) => setTimeout(resolve, 30));
  }

  console.log(`\nüìä RESULTADO FASE 3 - EDI√á√ïES:`);
  console.log(`‚úÖ Sucessos: ${resultados.edicoes.sucesso}`);
  console.log(`‚ùå Erros: ${resultados.edicoes.erro}`);

  // Relat√≥rio final
  console.log("\nüèÜ RELAT√ìRIO FINAL DO TESTE");
  console.log("==========================");
  console.log(`üìù Cadastros: ${resultados.cadastros.sucesso}/100 sucessos`);
  console.log(
    `‚úÖ Aprova√ß√µes: ${resultados.aprovacoes.sucesso}/${usuariosCadastrados.length} sucessos`
  );
  console.log(
    `‚úèÔ∏è Edi√ß√µes: ${resultados.edicoes.sucesso}/${usuariosCadastrados.length} sucessos`
  );

  const totalOperacoes =
    resultados.cadastros.sucesso +
    resultados.aprovacoes.sucesso +
    resultados.edicoes.sucesso;
  const totalPossivel =
    100 + usuariosCadastrados.length + usuariosCadastrados.length;
  const percentualSucesso = ((totalOperacoes / totalPossivel) * 100).toFixed(2);

  console.log(`\nüéØ TAXA DE SUCESSO GERAL: ${percentualSucesso}%`);

  if (resultados.cadastros.erros.length > 0) {
    console.log("\n‚ùå ERROS DE CADASTRO:");
    resultados.cadastros.erros.forEach((erro) => {
      console.log(`   Aluno ${erro.index}: ${erro.error}`);
    });
  }

  if (resultados.aprovacoes.erros.length > 0) {
    console.log("\n‚ùå ERROS DE APROVA√á√ÉO:");
    resultados.aprovacoes.erros.forEach((erro) => {
      console.log(`   Aluno ${erro.index}: ${erro.error}`);
    });
  }

  if (resultados.edicoes.erros.length > 0) {
    console.log("\n‚ùå ERROS DE EDI√á√ÉO:");
    resultados.edicoes.erros.forEach((erro) => {
      console.log(`   Aluno ${erro.index}: ${erro.error}`);
    });
  }

  if (totalOperacoes === totalPossivel) {
    console.log("\nüéâ TESTE MASSIVO CONCLU√çDO COM 100% DE SUCESSO!");
    console.log("   O sistema est√° est√°vel e pronto para produ√ß√£o!");
  } else {
    console.log("\n‚ö†Ô∏è TESTE MASSIVO CONCLU√çDO COM ALGUNS ERROS");
    console.log("   Revise os erros acima e corrija antes de ir para produ√ß√£o");
  }

  return resultados;
}

// Executar o teste
executarTesteMassivo().catch(console.error);

// Exportar para uso em outros scripts
if (typeof module !== "undefined" && module.exports) {
  module.exports = {
    gerarDadosAluno,
    cadastrarAluno,
    aprovarAluno,
    editarPerfilAluno,
    executarTesteMassivo,
  };
}
